#!/usr/bin/env ruby

require "bundler/setup"
require "nando"
require "optparse"

options = {}

gem_spec = Gem::Specification.find_by_name('nando') # TODO: loading Gem specification by name, there might be a better way

# nando [up|down|new] [options]

parser = OptionParser.new do |opt|
  opt.banner = "Usage \"#{gem_spec.name} [options]\""
  opt.define_head gem_spec.summary

  opt.separator ""

  opt.on("-t", "--type [VALUE]", String) do |type|
    options[:type] = type
  end

  opt.separator ""

  opt.on("-h", "--help", "Show this message") do |value|
    puts opt
    exit
  end
end

begin
  parser.parse!

  action = ARGV.shift()
  case action
  when 'up'
    NandoMigrator.migrate()
  when 'down'
    NandoMigrator.rollback()
  when 'new'
    if ARGV[0].nil?
      raise KeyError # ARGV[0] is the new migration name
    end
    NandoMigrator.new_migration(options, ARGV)
  when 'parse'
    if ARGV[0].nil? || ARGV[1].nil?
      raise KeyError
    end
    NandoMigrator.parse(options, ARGV)
  else
    STDERR.puts %Q[Invalid command "#{ARGV[0]}". Run "#{File.basename($0)} --help" for details.]
    exit 3
  end

rescue OptionParser::InvalidArgument => e
  STDERR.puts %Q[#{e.message.capitalize}. Run "#{File.basename($0)} --help" for details.]
  exit 1
rescue KeyError
  STDERR.puts %Q[Insufficient arguments. Run "#{File.basename($0)} --help" for details.]
  exit 2
rescue Nando::MigrationTypeError => e
  STDERR.puts %Q[Invalid migration type "#{e}". Run "#{File.basename($0)} --help" for details.]
  exit 2
rescue Nando::MigratingError => e
  STDERR.puts e
  exit 2
end
